[gd_scene load_steps=16 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://WhatsApp Image 2023-10-30 at 18.32.03.jpeg" type="Texture" id=2]
[ext_resource path="res://ShaderMouse.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "// pixelate effect

shader_type canvas_item;

uniform int resX = 32;
uniform int resY = 32;

// 0.100392156862 is the cube root of 255
uniform vec3 rgb255 = vec3(0.100392156862, 0.100392156862, 0.100392156862);

void fragment() {
	// how to create a grid with resX and rexY as grid template
	float uvX = UV.x - mod(UV.x * float(resX), 1) / float(resX);
	float uvY = UV.y - mod(UV.y * float(resY), 1) / float(resY);
	vec2 grid_uv = vec2(uvX, uvY);
	
	// get pixel from image(texture) with grid_uv
	vec4 col = texture(TEXTURE, grid_uv);
	
	if(col.r < 1.0 && col.g < 1.0 && col.b < 1.0) {
		// get module from
		vec3 remainder = mod(col.rgb, rgb255);
		col.rgb = col.rgb - remainder;
	}
	
	COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/resX = 32
shader_param/resY = 32
shader_param/rgb255 = Vector3( 0.100392, 0.100392, 0.100392 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

void fragment() {
	vec4 pixelColor = texture(TEXTURE, UV);
	COLOR = pixelColor;
	COLOR.rgb = COLOR.gbr;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "// pixelate effect

shader_type canvas_item;

uniform float resX: hint_range(0, 256) = 64;
uniform float resY:  hint_range(0, 256) = 64;
uniform vec2 mouse_position;

float border(vec2 uv, float border_width)
{
	vec2 bottom_left = step(vec2(border_width), uv);
	vec2 top_right = step(vec2(border_width), 1.0 - uv);
	return bottom_left.x * bottom_left.y * top_right.x * top_right.y;
}


void fragment() {
	// how to create a grid with resX and rexY as grid template
	float uvX = UV.x - mod(UV.x * float(resX), 1) / float(resX);
	float uvY = UV.y - mod(UV.y * float(resY), 1) / float(resY);
	vec2 grid_uv = vec2(uvX, uvY);
	
	// get pixel from image(texture) with grid_uv
	vec4 col = texture(TEXTURE, grid_uv);
	
	
	vec4 col1 = vec4(col.gbr, 1);
	
	if(col.r > col1.r) {
		vec3 diff = mod(col.rgb, col1.rgb);
		COLOR.rgb = COLOR.rgb - diff;
	}
	if(col.g > col1.g) {
		vec3 diff = mod(col.rgb, col1.rgb);
		COLOR.gbr = COLOR.rgb - diff;
	}
	if(col.b > col1.b) {
		vec3 diff = mod(col.rgb, col1.rgb);
		COLOR.brg = COLOR.rgb - diff;
	}
	
	float avg = (col.r+col.g+col.b)/3.0;

	if (UV.x-mouse_position.x > 0.0){
    		col.rgb = vec3(avg, avg, avg);
		COLOR = col;
	}
	if(UV.y - mouse_position.y > 0.0) {
		COLOR = col
	}
	
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/resX = 125.508
shader_param/resY = 77.123
shader_param/mouse_position = Vector2( 100, 10000 )

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

float circle(vec2 position, float radius, float feather)
{
	return smoothstep(radius, radius + feather, length(position - vec2(0.5)));
}

void fragment() {
	vec2 position_circle =  vec2(199,300);
	COLOR.rgb = vec3(circle(UV, 0.2, 0.1));
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

void fragment() {
	vec4 textureColor = texture(TEXTURE, UV + vec2(0.1,0.1) * TIME);
	COLOR = textureColor;
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="OpenSimplexNoise" id=11]

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[node name="Node2D" type="Node2D"]

[node name="Pixalate" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 256, 235 )
scale = Vector2( 7.90625, 7.21875 )
texture = ExtResource( 1 )

[node name="Icon2" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
position = Vector2( 169, 201 )
scale = Vector2( 4.54688, 4.85938 )
texture = ExtResource( 1 )

[node name="Gaby" type="Sprite" parent="."]
material = SubResource( 6 )
position = Vector2( 390, 300 )
scale = Vector2( 0.493158, 0.373125 )
texture = ExtResource( 2 )
script = ExtResource( 3 )

[node name="CircleShader" type="Sprite" parent="."]
visible = false
material = SubResource( 8 )

[node name="Noise" type="Sprite" parent="."]
visible = false
material = SubResource( 10 )
texture = SubResource( 12 )
